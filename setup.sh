#!/bin/bash
################################################################################
# AIFX v2 - Automated Setup Script
#
# This script will:
# 1. Install PostgreSQL and Redis
# 2. Create database and user
# 3. Rebuild Python virtual environment
# 4. Run database migrations
# 5. Verify all installations
#
# Usage:
#   chmod +x setup.sh
#   ./setup.sh
#
# Generated by Claude Code
################################################################################

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Log functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Progress bar function
show_progress() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local completed=$((width * current / total))

    printf "\r["
    printf "%${completed}s" | tr ' ' '='
    printf "%$((width - completed))s" | tr ' ' '-'
    printf "] %d%%" $percentage
}

# Header
echo "=============================================================================="
echo "                    AIFX v2 - Automated Setup Script                        "
echo "=============================================================================="
echo ""
echo "This script will install and configure all required services."
echo "Estimated time: 15-30 minutes"
echo ""
read -p "Press ENTER to continue or Ctrl+C to cancel..."
echo ""

# Set project root
PROJECT_ROOT="/root/AIFX_v2"
cd "$PROJECT_ROOT"

# Total steps
TOTAL_STEPS=10
CURRENT_STEP=0

################################################################################
# Step 1: System Update
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Updating system package list..."

sudo apt update > /dev/null 2>&1
log_success "System package list updated"
show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 2: Install PostgreSQL
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Installing PostgreSQL..."

if command -v psql &> /dev/null; then
    log_warning "PostgreSQL already installed, skipping..."
else
    sudo apt install postgresql postgresql-contrib -y > /dev/null 2>&1
    log_success "PostgreSQL installed successfully"
fi

# Start PostgreSQL
sudo systemctl start postgresql
sudo systemctl enable postgresql > /dev/null 2>&1

log_success "PostgreSQL service started"
show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 3: Install Redis
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Installing Redis..."

if command -v redis-cli &> /dev/null; then
    log_warning "Redis already installed, skipping..."
else
    sudo apt install redis-server -y > /dev/null 2>&1
    log_success "Redis installed successfully"
fi

# Start Redis
sudo systemctl start redis-server
sudo systemctl enable redis-server > /dev/null 2>&1

log_success "Redis service started"
show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 4: Install Python pip
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Installing Python pip..."

if command -v pip3 &> /dev/null; then
    log_warning "pip3 already installed, skipping..."
else
    sudo apt install python3-pip python3-venv -y > /dev/null 2>&1
    log_success "Python pip installed successfully"
fi

show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 5: Create PostgreSQL Database
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Setting up PostgreSQL database..."

# Check if database exists
if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw aifx_v2_dev; then
    log_warning "Database 'aifx_v2_dev' already exists"
else
    sudo -u postgres psql << 'EOF' > /dev/null 2>&1
CREATE DATABASE aifx_v2_dev;
CREATE USER postgres WITH PASSWORD 'postgres';
GRANT ALL PRIVILEGES ON DATABASE aifx_v2_dev TO postgres;
ALTER USER postgres WITH SUPERUSER;
EOF
    log_success "Database 'aifx_v2_dev' created"
fi

# Test connection (use sudo -u postgres to avoid password issues)
if sudo -u postgres psql -d aifx_v2_dev -c "SELECT 1" > /dev/null 2>&1; then
    log_success "Database connection verified"
else
    log_error "Database connection failed"
    exit 1
fi

show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 6: Rebuild Python Virtual Environment
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Rebuilding Python virtual environment..."

cd "$PROJECT_ROOT/ml_engine"

# Remove old venv
if [ -d "venv" ]; then
    log_info "Removing old virtual environment..."
    rm -rf venv
fi

# Create new venv
log_info "Creating new virtual environment..."
python3 -m venv venv

# Activate and install dependencies
log_info "Installing Python dependencies (this may take a few minutes)..."
source venv/bin/activate

pip install --upgrade pip > /dev/null 2>&1
pip install -r requirements.txt > /dev/null 2>&1

deactivate

log_success "Python virtual environment ready"
show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 7: Run Database Migrations
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Running database migrations..."

cd "$PROJECT_ROOT/backend"

npm run migrate > /tmp/migration.log 2>&1

if [ $? -eq 0 ]; then
    log_success "Database migrations completed"

    # Show migration summary
    MIGRATIONS_COUNT=$(grep -c "migrated" /tmp/migration.log || echo "0")
    log_info "Total migrations executed: $MIGRATIONS_COUNT"
else
    log_error "Database migrations failed"
    cat /tmp/migration.log
    exit 1
fi

show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 8: Verify PostgreSQL
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Verifying PostgreSQL installation..."

# Check service status
if sudo systemctl is-active --quiet postgresql; then
    log_success "PostgreSQL service is running"
else
    log_error "PostgreSQL service is not running"
    exit 1
fi

# Check database tables
TABLE_COUNT=$(sudo -u postgres psql -d aifx_v2_dev -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';" 2>/dev/null | xargs)

if [ -n "$TABLE_COUNT" ] && [ "$TABLE_COUNT" -gt 0 ]; then
    log_success "Database has $TABLE_COUNT tables"
else
    log_error "No tables found in database"
    exit 1
fi

show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 9: Verify Redis
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Verifying Redis installation..."

# Check service status
if sudo systemctl is-active --quiet redis-server; then
    log_success "Redis service is running"
else
    log_error "Redis service is not running"
    exit 1
fi

# Test connection
if redis-cli ping > /dev/null 2>&1; then
    log_success "Redis connection verified"
else
    log_error "Redis connection failed"
    exit 1
fi

show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Step 10: Generate Summary Report
################################################################################
CURRENT_STEP=$((CURRENT_STEP + 1))
log_info "[$CURRENT_STEP/$TOTAL_STEPS] Generating installation report..."

# Create report file
REPORT_FILE="$PROJECT_ROOT/INSTALLATION_REPORT.txt"

cat > "$REPORT_FILE" << EOF
================================================================================
AIFX v2 - Installation Report
================================================================================
Installation Date: $(date)
Installation Status: SUCCESS

System Information:
-------------------
OS: $(lsb_release -d | cut -f2)
Kernel: $(uname -r)
Node.js: $(node --version)
Python: $(python3 --version)
PostgreSQL: $(psql --version | head -1)
Redis: $(redis-server --version)

Installed Services:
-------------------
✓ PostgreSQL
  - Status: $(sudo systemctl is-active postgresql)
  - Database: aifx_v2_dev
  - Tables: $TABLE_COUNT

✓ Redis
  - Status: $(sudo systemctl is-active redis-server)
  - Connection: OK

✓ Python Virtual Environment
  - Location: $PROJECT_ROOT/ml_engine/venv
  - Packages: $($PROJECT_ROOT/ml_engine/venv/bin/pip list --format=freeze 2>/dev/null | wc -l)

✓ Node.js Dependencies
  - Backend: $(cd $PROJECT_ROOT/backend && npm list --depth=0 2>&1 | grep -c "├──\|└──")
  - Frontend: $(cd $PROJECT_ROOT/frontend && npm list --depth=0 2>&1 | grep -c "├──\|└──")

Database Migrations:
-------------------
Total migrations executed: $MIGRATIONS_COUNT

Next Steps:
-------------------
1. Start Backend:
   cd $PROJECT_ROOT/backend
   npm run dev

2. Start Frontend:
   cd $PROJECT_ROOT/frontend
   npm run dev

3. Start ML Engine:
   cd $PROJECT_ROOT/ml_engine
   source venv/bin/activate
   uvicorn api.ml_server:app --reload --host 0.0.0.0 --port 8000

4. Access Application:
   - Frontend: http://localhost:5173
   - Backend API: http://localhost:3000/api/v1
   - ML Engine API: http://localhost:8000

Service URLs:
-------------------
Backend:  http://localhost:3000
Frontend: http://localhost:5173
ML API:   http://localhost:8000
PostgreSQL: localhost:5432
Redis:    localhost:6379

Important Notes:
-------------------
- All services installed successfully
- Database migrations completed
- Python virtual environment ready
- Node.js dependencies installed

To start all services, run:
  $PROJECT_ROOT/start-all-services.sh

For troubleshooting, see:
  $PROJECT_ROOT/SYSTEM_STATUS_REPORT.md

================================================================================
Installation completed successfully!
================================================================================
EOF

log_success "Installation report saved to: $REPORT_FILE"
show_progress $CURRENT_STEP $TOTAL_STEPS
echo ""

################################################################################
# Final Summary
################################################################################
echo ""
echo "=============================================================================="
echo "                    Installation Complete! 🎉                               "
echo "=============================================================================="
echo ""
log_success "All services installed and configured successfully!"
echo ""
echo "📊 Installation Summary:"
echo "   ✓ PostgreSQL installed and running"
echo "   ✓ Redis installed and running"
echo "   ✓ Python virtual environment created"
echo "   ✓ Database migrations completed ($MIGRATIONS_COUNT migrations)"
echo "   ✓ $TABLE_COUNT database tables created"
echo ""
echo "📁 Installation report saved to:"
echo "   $REPORT_FILE"
echo ""
echo "🚀 Next Steps:"
echo ""
echo "   To start all services, run:"
echo "   ./start-all-services.sh"
echo ""
echo "   Or start them individually:"
echo ""
echo "   Terminal 1 - Backend:"
echo "   cd $PROJECT_ROOT/backend && npm run dev"
echo ""
echo "   Terminal 2 - Frontend:"
echo "   cd $PROJECT_ROOT/frontend && npm run dev"
echo ""
echo "   Terminal 3 - ML Engine:"
echo "   cd $PROJECT_ROOT/ml_engine"
echo "   source venv/bin/activate"
echo "   uvicorn api.ml_server:app --reload --host 0.0.0.0 --port 8000"
echo ""
echo "📚 Documentation:"
echo "   - Quick Start: $PROJECT_ROOT/QUICK_START.md"
echo "   - System Status: $PROJECT_ROOT/SYSTEM_STATUS_REPORT.md"
echo "   - API Docs: $PROJECT_ROOT/README.md"
echo ""
echo "✅ Setup complete! Your AIFX v2 system is ready to use."
echo "=============================================================================="
echo ""
